heat_template_version: 2013-05-23

description: >-
  Setup an OpenVPN with a public IP and a new relevant security group

parameters:
  key_name:
    type: string
    label: Keypair Name
    description: Name of a KeyPair to enable SSH access to the instance.
    constraints:
      - custom_constraint: nova.keypair
  instance_type:
    type: string
    label: OpenVPN Instance Type
    description: Instance type for the OpenVPN server.
    constraints:
      - custom_constraint: nova.flavor
  image_id:
    type: string
    label: OpenVPN Image
    description: ID of the image to use for the OpenVPN server (Tested only with ubuntu 14.04 LTS).
    constraints:
      - custom_constraint: glance.image
  public_net_id:
    type: string
    label: Public Network
    description: Public network for which floating IP addresses will be allocated.
    constraints:
      - custom_constraint: neutron.network
  private_net_id:
    type: string
    label: Private Network
    description: Private network in which OpenVPN will be linked.
    constraints:
      - custom_constraint: neutron.network
  vpn_cidr:
    type: string
    default: 10.8.0.0/24
    description: OpenVPN CIDR. It has to be unique and must not overlap the CIDR of your private_net_id, public_net_id, and neither of your clients connecting to the VPN.
  vpn_name:
    type: string
    default: my_project_name
    label: OpenVPN connection name
    description: Humane friendly name of this VPN connection on client machine. It will be used in say "systemctl stop openvpn@VPN_NAME".

resources:
  secgroup-ovpn:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Enable traffic external traffic on UDP:1194 for openVpn trafic
      rules: [{protocol: udp, port_range_max: 1194, port_range_min: 1194},]

  secgroup-ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Enable traffic external traffic on SSH.
      rules: [{protocol: tcp, port_range_max: 22, port_range_min: 22},]

  secgroup-internal:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Enable all traffic between instances.
      rules: [{protocol: tcp, port_range_max: 65535, port_range_min: 1, remote_mode: remote_group_id},]

  floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
  floating_assos:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating}
      server_id: { get_resource: openvpn_instance}

# Servers

  openvpn_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
      - { get_resource: secgroup-ovpn }
      - { get_resource: secgroup-ssh }
      - { get_resource: secgroup-internal }
      networks:
      - network:
          get_param: private_net_id
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            "%public_ip%": { get_resource: floating }
            "%vpncidr%": { get_param: vpn_cidr }
            "%vpn_name%": { get_param: vpn_name }
          template: |
            #!/bin/bash

            echo "Preparing the instance to be ready to run with Heat..."
            echo "######################################################"
            echo ""
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get -f -y -q install git python-setuptools ipcalc wget
            apt-get -f -y -q install python-argparse cloud-init python-psutil python-pip
            pip install 'boto==2.5.2' heat-cfntools
            cfn-create-aws-symlinks -s /usr/local/bin/

            echo "Installing and configuring OpenVPN..."
            echo "###################################"
            echo ""
            apt-get -f -y -q install openvpn easy-rsa
            # TODO: get the floating IP from heat and avoid the following HACK
            # when http://docs.openstack.org/developer/heat/template_guide/
            # will be a little bit more readable.
            export FLOATING_IP=$(wget -q -O - checkip.dyndns.org|sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
            export OVPN_IP=$(ipcalc -nb %vpncidr% | grep ^Address | awk '{print $2}')
            export OVPN_MASK=$(ipcalc -nb %vpncidr% | grep ^Netmask | awk '{print $2}')
            export PRIVATE_IP_CIDR=$(ip addr show dev eth0 | grep 'inet .*$' | awk '{print $2}')
            export PRIVATE_NETWORK_CIDR=$(ipcalc -nb $PRIVATE_IP_CIDR | grep ^Network | awk '{print $2}')
            export PRIVATE_NETWORK_IP=$(ipcalc -nb $PRIVATE_NETWORK_CIDR | grep ^Address | awk '{print $2}')
            export PRIVATE_NETWORK_MASK=$(ipcalc -nb $PRIVATE_NETWORK_CIDR | grep ^Netmask | awk '{print $2}')


            cat > /etc/openvpn/route-up.sh <<EOF
            #!/bin/bash
            /sbin/sysctl -n net.ipv4.conf.all.forwarding > /var/log/openvpn/net.ipv4.conf.all.forwarding.bak
            /sbin/sysctl net.ipv4.conf.all.forwarding=1
            /sbin/iptables-save > /var/log/openvpn/iptables.save
            /sbin/iptables -t nat -F
            /sbin/iptables -t nat -A POSTROUTING -s %vpncidr% -j MASQUERADE
            EOF

            # Down script
            cat > /etc/openvpn/down.sh <<EOF
            #!/bin/bash
            FORWARDING=\$(cat /var/log/openvpn/net.ipv4.conf.all.forwarding.bak)
            echo "restoring net.ipv4.conf.all.forwarding=\$FORWARDING"
            /sbin/sysctl net.ipv4.conf.all.forwarding=\$FORWARDING
            /etc/openvpn/fw.stop
            echo "Restoring iptables"
            /sbin/iptables-restore < /var/log/openvpn/iptables.save
            EOF

            # Firewall stop script
            cat > /etc/openvpn/fw.stop <<EOF
            #!/bin/sh
            echo "Stopping firewall and allowing everyone..."
            /sbin/iptables -F
            /sbin/iptables -X
            /sbin/iptables -t nat -F
            /sbin/iptables -t nat -X
            /sbin/iptables -t mangle -F
            /sbin/iptables -t mangle -X
            /sbin/iptables -P INPUT ACCEPT
            /sbin/iptables -P FORWARD ACCEPT
            /sbin/iptables -P OUTPUT ACCEPT
            EOF
            chmod 755 /etc/openvpn/down.sh /etc/openvpn/route-up.sh /etc/openvpn/fw.stop

            # OpenVPN server configuration
            cat > /etc/openvpn/server.conf <<EOF
            port 1194
            proto udp
            dev tun
            ca /etc/openvpn/ca.crt
            cert /etc/openvpn/server.crt
            key /etc/openvpn/server.key
            crl-verify /etc/openvpn/crl.pem
            dh /etc/openvpn/dh2048.pem
            server $OVPN_IP $OVPN_MASK
            ifconfig-pool-persist ipp.txt
            push "route $PRIVATE_NETWORK_IP $PRIVATE_NETWORK_MASK"
            keepalive 10 120
            tls-auth ta.key 0 # This file is secret
            comp-lzo
            persist-key
            persist-tun
            status /var/log/openvpn/openvpn-status.log
            log /var/log/openvpn/openvpn.log
            verb 3
            script-security 2
            route-up /etc/openvpn/route-up.sh
            down /etc/openvpn/down.sh
            EOF

            # Sample configuration for client
            cat > /tmp/openvpn.template <<EOF
            client
            dev tun
            proto udp
            remote $FLOATING_IP 1194
            resolv-retry infinite
            nobind
            user nobody
            group nogroup
            persist-key
            persist-tun
            ca keys/ca.crt
            cert keys/client.crt
            key keys/client.key
            ns-cert-type server
            tls-auth keys/ta.key 1
            comp-lzo
            verb 3
            EOF

            mkdir /etc/openvpn/easy-rsa
            cp -r /usr/share/easy-rsa /etc/openvpn/
            cd /etc/openvpn/easy-rsa
            ln -s openssl-1.0.0.cnf openssl.cnf
            source vars
            ./clean-all
            ./build-dh
            KEY_EMAIL=ca@openvpn ./pkitool --initca
            KEY_EMAIL=server@pilgrim ./pkitool --server server
            KEY_EMAIL=client@pilgrim ./pkitool client
            KEY_EMAIL=revoked@pilgrim ./pkitool revoked
            ./revoke-full revoked  # Generates a crl.pem revocation list
            openvpn --genkey --secret keys/ta.key
            ln keys/{ca.crt,server.crt,server.key,dh2048.pem,crl.pem,ta.key} /etc/openvpn/
            mv /tmp/openvpn.template ./client.conf
            tar -cvjpf vpnaccess.tar.bz2 client.conf keys/ca.crt keys/client.key keys/client.crt keys/ta.key
            cp vpnaccess.tar.bz2 /home/cloud/
            chown cloud:cloud /home/cloud/vpnaccess.tar.bz2
            mkdir -p /var/log/openvpn
            service openvpn start
            
            # Script to create certificate/key pairs for new clients.
            apt-get -f -y -q install zip unzip
            (cd /etc/openvpn/easy-rsa/ && ln -s keys %vpn_name%-keys)
            cat >/etc/openvpn/easy-rsa/client-add.sh <<EOF
            #!/bin/bash
            #set -ex
            #
            CLIENT_NAME="\$1"
            CLIENT_MAIL="\$2"
            PROJECT="%vpn_name%"
            #
            if [ -z "\$CLIENT_MAIL" ]
            then
                echo "Usage: \$0 CLIENT_NAME CLIENT_EMAIL" 1>&2
                exit 1
            fi
            #
            source vars
            cp -a "\$KEY_DIR" "\$KEY_DIR".back-`date +%s`
            #
            KEY_EMAIL=\${CLIENT_MAIL} ./pkitool \${CLIENT_NAME}
            cp client.conf \${PROJECT}-\${CLIENT_NAME}.conf
            sed -i "s|^ca .*|ca \${PROJECT}-keys/ca.crt|"  \${PROJECT}-\${CLIENT_NAME}.conf
            sed -i "s|^tls-auth .*|tls-auth \${PROJECT}-keys/ta.key 1|"  \${PROJECT}-\${CLIENT_NAME}.conf
            sed -i "s|^cert .*|cert \${PROJECT}-keys/\${CLIENT_NAME}.crt|"  \${PROJECT}-\${CLIENT_NAME}.conf
            sed -i "s|^key .*|key \${PROJECT}-keys/\${CLIENT_NAME}.key|"  \${PROJECT}-\${CLIENT_NAME}.conf
            tar -cvjpf vpnaccess-\${PROJECT}-\${CLIENT_NAME}.tar.bz2 \${PROJECT}-\${CLIENT_NAME}.conf \${PROJECT}-keys/{ca.crt,ta.key,\${CLIENT_NAME}.key,\${CLIENT_NAME}.crt}
            zip        vpnaccess-\${PROJECT}-\${CLIENT_NAME}.zip     \${PROJECT}-\${CLIENT_NAME}.conf \${PROJECT}-keys/{ca.crt,ta.key,\${CLIENT_NAME}.key,\${CLIENT_NAME}.crt}
            EOF
            chmod a+x /etc/openvpn/easy-rsa/client-add.sh
